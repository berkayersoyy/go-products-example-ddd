// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/berkayersoyy/go-products-example-ddd/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: product
func (_m *ProductRepository) AddProduct(product domain.Product) domain.Product {
	ret := _m.Called(product)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(domain.Product) domain.Product); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: product
func (_m *ProductRepository) DeleteProduct(product domain.Product) {
	_m.Called(product)
}

// GetAllProducts provides a mock function with given fields:
func (_m *ProductRepository) GetAllProducts() []domain.Product {
	ret := _m.Called()

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	return r0
}

// GetProductByID provides a mock function with given fields: id
func (_m *ProductRepository) GetProductByID(id uint) domain.Product {
	ret := _m.Called(id)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(uint) domain.Product); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	return r0
}
