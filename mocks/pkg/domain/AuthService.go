// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	http "net/http"

	domain "github.com/berkayersoyy/go-products-example-ddd/pkg/domain"

	jwt "github.com/dgrijalva/jwt-go"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: userid, td
func (_m *AuthService) CreateAuth(userid uint, td *domain.TokenDetails) error {
	ret := _m.Called(userid, td)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *domain.TokenDetails) error); ok {
		r0 = rf(userid, td)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: userid
func (_m *AuthService) CreateToken(userid uint) (*domain.TokenDetails, error) {
	ret := _m.Called(userid)

	var r0 *domain.TokenDetails
	if rf, ok := ret.Get(0).(func(uint) *domain.TokenDetails); ok {
		r0 = rf(userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuth provides a mock function with given fields: givenUuid
func (_m *AuthService) DeleteAuth(givenUuid string) (int64, error) {
	ret := _m.Called(givenUuid)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(givenUuid)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(givenUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTokens provides a mock function with given fields: authD
func (_m *AuthService) DeleteTokens(authD *domain.AccessDetails) error {
	ret := _m.Called(authD)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.AccessDetails) error); ok {
		r0 = rf(authD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExtractTokenMetadata provides a mock function with given fields: r
func (_m *AuthService) ExtractTokenMetadata(r *http.Request) (*domain.AccessDetails, error) {
	ret := _m.Called(r)

	var r0 *domain.AccessDetails
	if rf, ok := ret.Get(0).(func(*http.Request) *domain.AccessDetails); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AccessDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAuth provides a mock function with given fields: authD
func (_m *AuthService) FetchAuth(authD *domain.AccessDetails) (uint64, error) {
	ret := _m.Called(authD)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(*domain.AccessDetails) uint64); ok {
		r0 = rf(authD)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.AccessDetails) error); ok {
		r1 = rf(authD)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenValid provides a mock function with given fields: r
func (_m *AuthService) TokenValid(r *http.Request) error {
	ret := _m.Called(r)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: r
func (_m *AuthService) ValidateToken(r *http.Request) (*jwt.Token, error) {
	ret := _m.Called(r)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(*http.Request) *jwt.Token); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
